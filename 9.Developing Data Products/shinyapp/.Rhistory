document <- Corpus(URISource("C:/Users/Sheetal/Valreport.pdf"), readerControl = list(reader = read))
library("pdftools")
library("tidyverse")
library("tidytext")
library("gutenbergr")
library("tm")
readPDF(engine = "xpdf", control = list(text = "-layout"))
document <- Corpus(URISource("C:/Users/Sheetal/Valreport.pdf"), readerControl = list(reader = read))
read <- readPDF(control = list(text = "-layout"))
document <- Corpus(URISource("C:/Users/Sheetal/Valreport.pdf"), readerControl = list(reader = read))
htw <- Corpus(URISource("C:/Users/Sheetal/htw.pdf"), readerControl = list(reader = read))
htw <- Corpus(URISource("C:/Users/Sheetal/htwreport.pdf"), readerControl = list(reader = read))
htw <- unlist(paste(htw ,collapse = ' '))
htw
document
document <- unlist(paste(htw ,collapse = ' '))
doc <- content(document[[1]])
doc <- content(document[[1]])
document <- Corpus(URISource("C:/Users/Sheetal/Valreport.pdf"), readerControl = list(reader = read))
doc <- content(document[[1]])
head(doc)
document
head(htw)
rm(htw)
htw <- Corpus(URISource("C:/Users/Sheetal/htwreport.pdf"), readerControl = list(reader = read))
htw <- content(htw[[1]])
head(htw)
head(doc)
htw <- content(htw[[2]])
htw <- content(htw[[1]])
htw <- Corpus(URISource("C:/Users/Sheetal/htwreport.pdf"), readerControl = list(reader = read))
htw
document
View(htw)
View(htw)
View(document)
View(document)
doc <- content(document[[2]])
htw <- content(htw[[1]])
htw <- unlist(paste(htw ,collapse = ' '))
view(htw)
htw
document2 <- strsplit(document, "\n")
doc <- content(document[[1]])
doc
document2 <- strsplit(document,"\n")
doc <- doc[- c(1:2)]
doc
inspect(docs[1])
inspect(doc[1])
url <- "http://www.noisyroom.net/blog/RomneySpeech072912.pdf"
dest <- tempfile(fileext = ".pdf")
download.file(url, dest, mode = "wb")
exe <- "C:\\Program Files\\xpdfbin-win-3.03\\bin32\\pdftotext.exe"
system(paste("\"", exe, "\" \"", dest, "\"", sep = ""), wait = F)
filetxt <- sub(".pdf", ".txt", dest)
shell.exec(filetxt); shell.exec(filetxt) # strangely the first try always throws an error..
ith it, i.e. a simple word cloud
library(tm)
txt <- tolower(txt)
txt <- removeWords(txt, c("\\f", stopwords()))
corpus <- Corpus(VectorSource(txt))
library("pdftools")
library("tidyverse")
library("tidytext")
library("gutenbergr")
library("tm")
read <- readPDF(control = list(text = "-layout"))
document <- Corpus(URISource("C:/Users/Sheetal/Valreport.pdf"), readerControl = list(reader = read))
doc <- content(document[[1]]
doc <- content(document[[1]])
document
doc <- content(document[[1]])
doc
section <- document[1]
section
opinions.tdm <- TermDocumentMatrix(document, control = list(removePunctuation = TRUE,
stopwords = TRUE,
tolower = TRUE,
stemming = TRUE,
removeNumbers = TRUE,
bounds = list(global = c(3, Inf))))
View(opinions.tdm)
View(opinions.tdm)
inspect(opinions.tdm[1:10,])
rm(opinions.tdm)
document
writelines(document)
writeLines()
writeLines(document)
writeLines(doc)
doc <- content(document[[1]])
writeLines(doc)
nospace <- tm_map(doc, stripWhitespace, lazy=TRUE)
nospace <- tm_map(document, stripWhitespace, lazy=TRUE)
nospace
readLines(nospace)
write(nospace)
content(nospace[[1]])
# Stemming
nospace<- tm_map(shakespeare, stemDocument, lazy=TRUE)
# Remove punctuation
nospace <- tm_map(shakespeare, removePunctuation, lazy=TRUE)
# Remove stopwords
tm_map(nospace, content_transformer(removeWords), stopwords("the"), lazy=TRUE)
nospace<- tm_map(document, stemDocument, lazy=TRUE)
# Remove punctuation
nospace <- tm_map(document, removePunctuation, lazy=TRUE)
# Remove stopwords
nospace <- tm_map(document, content_transformer(removeWords), stopwords("the"), lazy=TRUE)
content(nospace[[1]])
content(nospace[[1]])
nospace <- tm_map(document, stripWhitespace, lazy=TRUE)
nospace<- tm_map(document, stemDocument, lazy=TRUE)
content(nospace[[1]])
finder <- c('Environmental Issues',
'Marketability')
library(stringr)
trimws(str_extract(str_extract(finder, '.* [0-9.]{3}'),'.* '))
trimws(str_extract(nospace(finder, '.* [0-9.]{3}'),'.* '))
nospace(str_extract((finder, '.* [0-9.]{3}'),'.* '))
trimws(str_extract(str_extract(finder, '.* [0-9.]{3}'),'.* '))
nospace
writeLines(nospace)
content(nospace[[1]])
s <- gsub(environmental issues: (\d+),nospace)
s <- gsub("environmental issues:(\d+)",nospace)
s <- gsub("environmental issues:(\\d+)",nospace)
s <- grep("environmental issues:(\\d+)",nospace)
s <- grep("environmental issues:(\d+)",nospace)
s <- grep("environmental issues:(\d+)","\\",nospace)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(lubridate)
library(caret)
library(randomForest)
test <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-testing.csv")
train <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-trainning.csv")
test <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-testing.csv")
train <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-training.csv")
summary(train)
test <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-testing.csv")
train <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-training.csv")
trainRaw <- trainRaw[, colSums(is.na(train)) == 0]
test <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-testing.csv")
train <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-training.csv")
trainRaw <- train[, colSums(is.na(train)) == 0]
testRaw <- test[, colSums(is.na(test)) == 0]
test <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-testing.csv")
train <- read.csv("C:/Users/Sheetal/datasciencecoursera/machinelearning project/pml-training.csv")
trainRaw <- train[, colSums(is.na(train)) == 0]
testRaw <- test[, colSums(is.na(test)) == 0]
classe <- trainRaw$classe
trainRemove <- grepl("^X|timestamp|window", names(trainRaw))
trainRaw <- trainRaw[, !trainRemove]
trainCleaned <- trainRaw[, sapply(trainRaw, is.numeric)]
trainCleaned$classe <- classe
testRemove <- grepl("^X|timestamp|window", names(testRaw))
testRaw <- testRaw[, !testRemove]
testCleaned <- testRaw[, sapply(testRaw, is.numeric)]
View(train)
View(train)
View(trainCleaned)
View(trainCleaned)
table(trainCleaned$classe)
table(trainCleaned$classe)
table(trainCleaned$classe)
qplot(x=Day, fill=classe, data = data.train)
table(trainCleaned$classe)
qplot(x=Day, fill=classe, data = trainCleaned)
View(test)
View(testCleaned)
View(testCleaned)
View(trainRaw)
View(trainRaw)
table(trainCleaned$classe)
prop.table(table(data.train$classe))
table(trainCleaned$classe)
prop.table(table(trainCleaned$classe))
set.seed(22519) # For reproducibile purpose
inTrain <- createDataPartition(trainCleaned$classe, p=0.70, list=F)
trainData <- trainCleaned[inTrain, ]
testData <- trainCleaned[-inTrain, ]
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=250)
controlRf <- trainControl(method="cv", 5)
modelRf <- train(classe ~ ., data=trainData, method="rf", trControl=controlRf, ntree=25)
modelRf
predictRfmod<- predict(rfmod, testData)
predictRfmod<- predict(modelRf, testData)
confusionMatrix(testData$classe, predictRfmod)
result <- predict(modelRf, testCleaned[, -length(names(testCleaned))])
result
treeModel <- rpart(classe ~ ., data=trainData, method="class")
library(dplyr)
library(ggplot2)
library(lubridate)
library(caret)
library(randomForest)
library(rpart)
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
library(dplyr)
library(ggplot2)
library(lubridate)
library(caret)
library(randomForest)
library(rpart)
library(rpart.plot)
treeModel <- rpart(classe ~ ., data=trainData, method="class")
prp(treeModel) # fast plot
plot(modelRfF,main="Accuracy of Random forest model by number of predictors")
plot(modelRf,main="Accuracy of Random forest model by number of predictors")
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
TajMahal <- c("<a href= 'https://www.tajmahal.gov.in/view_taj.html' >Taj Mahal</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=27.173891, lng=78.042068, popup = TajMahal)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- leaflet() %>%
addTiles()
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
my_map <- map () %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
library(leaflet)
my_map <- map () %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
library(leaflet)
my_map <- my_map () %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
my_map
View(my_map)
View(my_map)
rm(my_map)
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
library(leaflet)
my_map <- my_map %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=39.2980803,lng=-76.5898801,
popup="Jeff Leeks Office")
my_map
my_map <- leaflet() %>%
addTiles()
my_map
TajMahal <- c("<a href= 'https://www.tajmahal.gov.in/view_taj.html' >Taj Mahal</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=27.173891, lng=78.042068, popup = TajMahal)
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=27.173891, lng=78.042068, popup = TajMahal)
my_map
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=51.1152, lng=115.7633, popup = TajMahal)
my_map
rm(my_map)
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=51.1152, lng=115.7633, popup = TajMahal)
my_map
View(my_map)
View(my_map)
TajMahal <- c("<a href= 'https://www.tajmahal.gov.in/view_taj.html' >Taj Mahal</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.1152, lng=115.7633, popup = TajMahal)
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=51.0443, lng=115.4656, popup = TajMahal)
my_map
TajMahal <- c("<a href= 'https://www.tajmahal.gov.in/view_taj.html' >Taj Mahal</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=115.4656, popup = TajMahal)
TajMahal <- c("<a href= 'https://www.tajmahal.gov.in/view_taj.html' >Taj Mahal</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = TajMahal)
library(leaflet)
my_map <- leaflet() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
my_map
rm(my_map)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
my_map
rm(my_map)
leaflet() %>%
addTiles() %>%
addMarkers(lat=27.173891, lng=78.042068, popup = "TajMahal")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
leaflet() %>%
addTiles() %>%
addMarkers(lat=27.173891, lng=78.042068, popup = "TajMahal")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = SunshineVillage)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
SunshineVillage <- c("<a href= https://www.skibanff.com</a>")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles("Ski Resort") %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles("Ski Resort") %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
library(leaflet)
leaflet() %>%
addTiles("Ski Resort") %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
install.packages("plotly")
install.packages("plotly")
knitr::opts_chunk$set(echo = TRUE)
library("plotly")
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter-basic")
library("plotly")
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter-basic")
View(p)
1+1
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
knitr::opts_chunk$set(echo = FALSE)
library("plotly")
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
knitr::opts_chunk$set(echo = FALSE)
library("plotly")
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length)
library(leaflet)
leaflet() %>%
addTiles() %>%
addMarkers(lat=51.0443, lng=-115.4656, popup = "SunshineVillage")
packageVersion('plotly')
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
shiny::runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
bcl <- read.csv("C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp/bcl-data.csv", stringsAsFactors = FALSE)
print(str(bcl))
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
runApp('C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp')
getwd()
setwd("C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp/")
setwd("C:/Users/Sheetal/datasciencecoursera/developingdataproducts/shinyapp")
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
getwd()
runApp()
getwd()
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
summary(bc1)
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
summary(bcl)
# Chunk 1
bcl <- read.csv("bcl-data.csv", stringsAsFactors = FALSE)
summary(bcl)
# Chunk 2
plot(bcl$Alcohol_Content ~ bcl$Price)
